//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.6.1055.0。
// 
namespace DataUpdate {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="VeptsOutAccessSoap", Namespace="http://tempuri.org/")]
    public partial class VeptsOutAccess : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback queryOperationCompleted;
        
        private System.Threading.SendOrPostCallback writeOperationCompleted;
        
        /// <remarks/>
        public VeptsOutAccess() {
            this.Url = "http://10.1.121.200/hbjcxweb/services/VeptsOutAccess.asmx";
        }

        public VeptsOutAccess(string url)
        {
            this.Url = url;
        }

        /// <remarks/>
        public event queryCompletedEventHandler queryCompleted;
        
        /// <remarks/>
        public event writeCompletedEventHandler writeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/query", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string query(string xmlDoc) {
            FileOpreate.SaveLog(xmlDoc, "SEND", 3);
            object[] results = this.Invoke("query", new object[] {
                        xmlDoc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginquery(string xmlDoc, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("query", new object[] {
                        xmlDoc}, callback, asyncState);
        }
        
        /// <remarks/>
        public string Endquery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void queryAsync(string xmlDoc) {
            this.queryAsync(xmlDoc, null);
        }
        
        /// <remarks/>
        public void queryAsync(string xmlDoc, object userState) {
            if ((this.queryOperationCompleted == null)) {
                this.queryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnqueryOperationCompleted);
            }
            this.InvokeAsync("query", new object[] {
                        xmlDoc}, this.queryOperationCompleted, userState);
        }
        
        private void OnqueryOperationCompleted(object arg) {
            if ((this.queryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.queryCompleted(this, new queryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/write", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string write(string xmlDoc) {
            FileOpreate.SaveLog(xmlDoc, "SEND", 3);
            try
            {
                object[] results = this.Invoke("write", new object[] {
                        xmlDoc});
                return ((string)(results[0]));
            }
            catch (Exception er)
            {
                FileOpreate.SaveLog(er.Message, "接口调用错误", 3);
                return "Failed";
            }
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginwrite(string xmlDoc, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("write", new object[] {
                        xmlDoc}, callback, asyncState);
        }
        
        /// <remarks/>
        public string Endwrite(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void writeAsync(string xmlDoc) {
            this.writeAsync(xmlDoc, null);
        }
        
        /// <remarks/>
        public void writeAsync(string xmlDoc, object userState) {
            if ((this.writeOperationCompleted == null)) {
                this.writeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnwriteOperationCompleted);
            }
            this.InvokeAsync("write", new object[] {
                        xmlDoc}, this.writeOperationCompleted, userState);
        }
        
        private void OnwriteOperationCompleted(object arg) {
            if ((this.writeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.writeCompleted(this, new writeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void queryCompletedEventHandler(object sender, queryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class queryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal queryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void writeCompletedEventHandler(object sender, writeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class writeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal writeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
