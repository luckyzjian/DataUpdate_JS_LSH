//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace DataUpdate.WebReferenceJiangSu {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IVehicleServiceServiceSoapBinding", Namespace="http://synToCity.synchrodata.daniu.com/")]
    public partial class IVehicleServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback BeginCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadInspectionResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVehicleOperationCompleted;
        
        private System.Threading.SendOrPostCallback vehicleloginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCheckListOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBaseTypeInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IVehicleServiceService() {
            this.Url = global::DataUpdate.Properties.Settings.Default.DataUpdate_WebReferenceJiangSu_IVehicleServiceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event BeginCheckCompletedEventHandler BeginCheckCompleted;
        
        /// <remarks/>
        public event UploadInspectionResultCompletedEventHandler UploadInspectionResultCompleted;
        
        /// <remarks/>
        public event GetVehicleCompletedEventHandler GetVehicleCompleted;
        
        /// <remarks/>
        public event vehicleloginCompletedEventHandler vehicleloginCompleted;
        
        /// <remarks/>
        public event GetCheckListCompletedEventHandler GetCheckListCompleted;
        
        /// <remarks/>
        public event LoginServerCompletedEventHandler LoginServerCompleted;
        
        /// <remarks/>
        public event GetBaseTypeInfoCompletedEventHandler GetBaseTypeInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://synToCity.synchrodata.daniu.com/", ResponseNamespace="http://synToCity.synchrodata.daniu.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string BeginCheck([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string unitid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string lineid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string plate, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string vin) {
            object[] results = this.Invoke("BeginCheck", new object[] {
                        unitid,
                        lineid,
                        plate,
                        vin});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BeginCheckAsync(string unitid, string lineid, string plate, string vin) {
            this.BeginCheckAsync(unitid, lineid, plate, vin, null);
        }
        
        /// <remarks/>
        public void BeginCheckAsync(string unitid, string lineid, string plate, string vin, object userState) {
            if ((this.BeginCheckOperationCompleted == null)) {
                this.BeginCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginCheckOperationCompleted);
            }
            this.InvokeAsync("BeginCheck", new object[] {
                        unitid,
                        lineid,
                        plate,
                        vin}, this.BeginCheckOperationCompleted, userState);
        }
        
        private void OnBeginCheckOperationCompleted(object arg) {
            if ((this.BeginCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginCheckCompleted(this, new BeginCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://synToCity.synchrodata.daniu.com/", ResponseNamespace="http://synToCity.synchrodata.daniu.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string UploadInspectionResult([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string unitid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkresult, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int checkmethod) {
            object[] results = this.Invoke("UploadInspectionResult", new object[] {
                        token,
                        unitid,
                        checkresult,
                        checkmethod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadInspectionResultAsync(string token, string unitid, string checkresult, int checkmethod) {
            this.UploadInspectionResultAsync(token, unitid, checkresult, checkmethod, null);
        }
        
        /// <remarks/>
        public void UploadInspectionResultAsync(string token, string unitid, string checkresult, int checkmethod, object userState) {
            if ((this.UploadInspectionResultOperationCompleted == null)) {
                this.UploadInspectionResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadInspectionResultOperationCompleted);
            }
            this.InvokeAsync("UploadInspectionResult", new object[] {
                        token,
                        unitid,
                        checkresult,
                        checkmethod}, this.UploadInspectionResultOperationCompleted, userState);
        }
        
        private void OnUploadInspectionResultOperationCompleted(object arg) {
            if ((this.UploadInspectionResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadInspectionResultCompleted(this, new UploadInspectionResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://synToCity.synchrodata.daniu.com/", ResponseNamespace="http://synToCity.synchrodata.daniu.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetVehicle([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string unitid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string vin) {
            object[] results = this.Invoke("GetVehicle", new object[] {
                        token,
                        unitid,
                        vin});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVehicleAsync(string token, string unitid, string vin) {
            this.GetVehicleAsync(token, unitid, vin, null);
        }
        
        /// <remarks/>
        public void GetVehicleAsync(string token, string unitid, string vin, object userState) {
            if ((this.GetVehicleOperationCompleted == null)) {
                this.GetVehicleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVehicleOperationCompleted);
            }
            this.InvokeAsync("GetVehicle", new object[] {
                        token,
                        unitid,
                        vin}, this.GetVehicleOperationCompleted, userState);
        }
        
        private void OnGetVehicleOperationCompleted(object arg) {
            if ((this.GetVehicleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVehicleCompleted(this, new GetVehicleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://synToCity.synchrodata.daniu.com/", ResponseNamespace="http://synToCity.synchrodata.daniu.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string vehiclelogin([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string vehiclexml) {
            object[] results = this.Invoke("vehiclelogin", new object[] {
                        vehiclexml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void vehicleloginAsync(string vehiclexml) {
            this.vehicleloginAsync(vehiclexml, null);
        }
        
        /// <remarks/>
        public void vehicleloginAsync(string vehiclexml, object userState) {
            if ((this.vehicleloginOperationCompleted == null)) {
                this.vehicleloginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvehicleloginOperationCompleted);
            }
            this.InvokeAsync("vehiclelogin", new object[] {
                        vehiclexml}, this.vehicleloginOperationCompleted, userState);
        }
        
        private void OnvehicleloginOperationCompleted(object arg) {
            if ((this.vehicleloginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.vehicleloginCompleted(this, new vehicleloginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://synToCity.synchrodata.daniu.com/", ResponseNamespace="http://synToCity.synchrodata.daniu.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetCheckList([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string unitid) {
            object[] results = this.Invoke("GetCheckList", new object[] {
                        token,
                        unitid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCheckListAsync(string token, string unitid) {
            this.GetCheckListAsync(token, unitid, null);
        }
        
        /// <remarks/>
        public void GetCheckListAsync(string token, string unitid, object userState) {
            if ((this.GetCheckListOperationCompleted == null)) {
                this.GetCheckListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckListOperationCompleted);
            }
            this.InvokeAsync("GetCheckList", new object[] {
                        token,
                        unitid}, this.GetCheckListOperationCompleted, userState);
        }
        
        private void OnGetCheckListOperationCompleted(object arg) {
            if ((this.GetCheckListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckListCompleted(this, new GetCheckListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://synToCity.synchrodata.daniu.com/", ResponseNamespace="http://synToCity.synchrodata.daniu.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string LoginServer([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string unitid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string lineid, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string pwd) {
            object[] results = this.Invoke("LoginServer", new object[] {
                        unitid,
                        lineid,
                        username,
                        pwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginServerAsync(string unitid, string lineid, string username, string pwd) {
            this.LoginServerAsync(unitid, lineid, username, pwd, null);
        }
        
        /// <remarks/>
        public void LoginServerAsync(string unitid, string lineid, string username, string pwd, object userState) {
            if ((this.LoginServerOperationCompleted == null)) {
                this.LoginServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginServerOperationCompleted);
            }
            this.InvokeAsync("LoginServer", new object[] {
                        unitid,
                        lineid,
                        username,
                        pwd}, this.LoginServerOperationCompleted, userState);
        }
        
        private void OnLoginServerOperationCompleted(object arg) {
            if ((this.LoginServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginServerCompleted(this, new LoginServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://synToCity.synchrodata.daniu.com/", ResponseNamespace="http://synToCity.synchrodata.daniu.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string GetBaseTypeInfo() {
            object[] results = this.Invoke("GetBaseTypeInfo", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBaseTypeInfoAsync() {
            this.GetBaseTypeInfoAsync(null);
        }
        
        /// <remarks/>
        public void GetBaseTypeInfoAsync(object userState) {
            if ((this.GetBaseTypeInfoOperationCompleted == null)) {
                this.GetBaseTypeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBaseTypeInfoOperationCompleted);
            }
            this.InvokeAsync("GetBaseTypeInfo", new object[0], this.GetBaseTypeInfoOperationCompleted, userState);
        }
        
        private void OnGetBaseTypeInfoOperationCompleted(object arg) {
            if ((this.GetBaseTypeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBaseTypeInfoCompleted(this, new GetBaseTypeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void BeginCheckCompletedEventHandler(object sender, BeginCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BeginCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void UploadInspectionResultCompletedEventHandler(object sender, UploadInspectionResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadInspectionResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadInspectionResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetVehicleCompletedEventHandler(object sender, GetVehicleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVehicleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVehicleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void vehicleloginCompletedEventHandler(object sender, vehicleloginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class vehicleloginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal vehicleloginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetCheckListCompletedEventHandler(object sender, GetCheckListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCheckListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void LoginServerCompletedEventHandler(object sender, LoginServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetBaseTypeInfoCompletedEventHandler(object sender, GetBaseTypeInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBaseTypeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBaseTypeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591